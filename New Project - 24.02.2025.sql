CREATE DATABASE COLLEGE;

USE COLLEGE;

CREATE TABLE STUDENT (
ROLLNO  INT PRIMARY KEY,
NAME VARCHAR(50),
MARKS INT NOT NULL,
GRADE VARCHAR(1),
CITY VARCHAR(20)
);

#PARENT TABLE:
CREATE TABLE DEPARTMENT (
ID  INT PRIMARY KEY,
NAME VARCHAR(50)
);

INSERT INTO DEPARTMENT
VALUES
(101, "ENGLISH"),
(102, "IT");

UPDATE DEPARTMENT
SET ID = 103
WHERE ID = 102;

SELECT * FROM DEPARTMENT;

#CHILD TABLE:
CREATE TABLE TEACHER (
ID  INT PRIMARY KEY,
NAME VARCHAR (50),
DEPARTMENTID INT,
FOREIGN KEY(DEPARTMENTID) REFERENCES DEPARTMENT(ID)
ON UPDATE CASCADE
ON DELETE CASCADE
);

INSERT INTO TEACHER
VALUES
(101, "ADAM", 101),
(102, "EVE", 102);

SELECT * FROM TEACHER;

INSERT INTO STUDENT 
(ROLLNO, NAME, MARKS, GRADE, CITY)
VALUES
(101,"ANIL",78, "C", "PUNE"),
(102,"BHUMIKA",93, "A", "MUMBAI"),
(103,"CHETAN",85, "B", "MUMBAI"),
(104,"DHRUV",96, "A", "DELHI"),
(105,"EMANUEL",12, "F", "DELHI"),
(106,"FARAH",82, "B", "DELHI");

SELECT NAME, MARKS FROM STUDENT;

SELECT * FROM STUDENT;

SELECT DISTINCT CITY FROM STUDENT; #CITY WILL NOT REPEAT, APPEAR ONLY ONCE USING DISTINCT.

SELECT * 
FROM STUDENT 
WHERE MARKS > 80;  #WHERE CONDITION

SELECT *
FROM STUDENT
WHERE MARKS>80 AND CITY = "MUMBAI";

#ARTHMATIC OPERATORS
SELECT *
FROM STUDENT
WHERE MARKS+10 > 100; 

#COMPARIOSN OPERATORS

SELECT *
FROM STUDENT
WHERE MARKS = 93;

#LOGICAL OPERATORS AND BITWISE OPERATORS.

# 1. AND

SELECT*
FROM STUDENT
WHERE MARKS > 90 AND CITY = "MUMBAI";

#2. OR
SELECT*
FROM STUDENT
WHERE MARKS > 90 OR CITY = "MUMBAI";

#3. BETWEEN
SELECT*
FROM STUDENT
WHERE MARKS BETWEEN 80 AND 90;

#4. IN

SELECT*
FROM STUDENT
WHERE CITY IN ("DELHI","MUMBAI","GURGAON");

#5. NOT

SELECT*
FROM STUDENT
WHERE CITY NOT IN ("MUMBAI","DELHI");

#Clause: LIMIT,
SELECT *
FROM STUDENT
WHERE MARKS >75
LIMIT 3;

#OrderbyClause: ORDER BY IN ASC & DES

SELECT *
FROM STUDENT
ORDER BY MARKS ASC;

SELECT *
FROM STUDENT
ORDER BY MARKS DESC
LIMIT 3;

#FUNCTIONS - 	MIN MAX AVG COUNT

SELECT MAX(MARKS)
FROM STUDENT;

SELECT MIN(MARKS)
FROM STUDENT;

SELECT AVG(MARKS)
FROM STUDENT;

#GROUP BY CLAUSE: GROUP BY COLLECT DATA BY MULTIPLE RECORDS.alter

SELECT CITY, NAME, COUNT(ROLLNO)
FROM STUDENT
GROUP BY CITY, NAME;

SELECT CITY, AVG(MARKS)
FROM STUDENT
GROUP BY CITY;

SELECT CITY, AVG(MARKS)
FROM STUDENT
GROUP BY CITY
ORDER BY CITY ASC;

SELECT CITY, AVG(MARKS)
FROM STUDENT
GROUP BY CITY
ORDER BY CITY DESC;

SELECT GRADE, COUNT(ROLLNO)
FROM STUDENT
GROUP BY GRADE
ORDER BY GRADE ASC;

#HAVING CLAUSE: WE CAN'T USE WHERE CONDITION HERE, HERE HAVING CLAUSE IS CONDITION OVER THE GROUPS.

SELECT CITY, COUNT(ROLLNO)
FROM STUDENT
GROUP BY CITY
HAVING MAX(MARKS)>90;

#GENERAL ORDER TO WRITE QUERY AND PERFORM OPERARIONS,
#SELECT COOLUMNS
#FROM TABEL_NAME
#WHERE CONDITION - CONDITION ON ROWS
#GROUP BY COLUMNS
#HAVING CONDITION - CONDITION ON COLUMNS
#ORDERBY COLUMNS ASC OR DESC;

SELECT CITY
FROM STUDENT
WHERE GRADE = "A"
GROUP BY CITY
HAVING MAX(MARKS)>=93
ORDER BY CITY ASC;

#TABLE RELATED QUERIS:
#1. UPDATE:

SET SQL_SAFE_UPDATES = 0; #TO UNLOCK SAFE MODE (WE CAN UPDATE IN THE TABLE) 0 IS UNLOCK 1 IS UNLOCK

UPDATE STUDENT
SET MARKS = 12
WHERE ROLLNO = 105;

SELECT * FROM STUDENT;

#2. DELETE:

DELETE FROM STUDENT 
WHERE MARKS < 33;

SELECT * FROM STUDENT;

#ALTER SCHEMA: 
#1. ADD COLUMN,

ALTER TABLE STUDENT
ADD COLUMN AGE INT NOT NULL;

SELECT * FROM STUDENT;

#2. DROP COLUMN,
ALTER TABLE STUDENT
DROP COLUMN AGE;

#3. RENAME TABLE:
#ALTER TABLE STUDENT
#RENAME TO STUDENT_DATA;

#4. CHANGE COLUMN (RENAME):
#ALTER TABLE STUDENT
#CHANGE COLUMN GRADE CLASS INT NOT NULL;

#5. MODFIY COLUMN (MODIFY DATA TYPE OR CONSTRAINT):
ALTER TABLE STUDENT
MODIFY AGE VARCHAR(2);

ALTER TABLE STUDENT 
CHANGE AGE STUDENT_AGE INT;

INSERT INTO STUDENT 
(ROLLNO, NAME, MARKS, STUDENT_AGE)
VALUES
(107, "GARGI", 68, 100);

ALTER TABLE STUDENT
DROP COLUMN STUDENT_AGE;

ALTER TABLE STUDENT
RENAME TO STU;

ALTER TABLE STU
RENAME TO STUDENT;

SELECT * FROM STUDENT;

#TRUNCATE: DROP(DELETES THE TABLE) TRUNCATE(DELETE THE TABLE DATA ONLY).

TRUNCATE TABLE STUDENT; 

#1.
ALTER TABLE STUDENT
CHANGE NAME FULL_NAME VARCHAR(50);

#2.
DELETE FROM STUDENT
WHERE MARKS < 80;

#3.
ALTER TABLE STUDENT
DROP GRADE;

SELECT * FROM STUDENT;

USE COLLEGE;


#SUBQUERIES

SELECT AVG(MARKS)
FROM STUDENT;

SELECT NAME, MARKS
FROM STUDENT
WHERE MARKS > 74.3333;

#THIS SHOULD BE DYNAMIC TO PROCESS IF DATA CHANGES SOMEHOW SO AVERAGE WILL CHANGE AUTOMATICALLY.

SELECT NAME, MARKS
FROM STUDENT
WHERE MARKS > (SELECT AVG(MARKS) FROM STUDENT); #SUBQUERY.(DYNAMIC(AUTO UPDATE) PROCESS).

#FOR ODD AND EVEN NUMBERS CONDITION (IF THE REMENDER(%) IS 0 WITH EVEN NUMBER)
#STEP.1

SELECT ROLLNO
FROM STUDENT
WHERE ROLLNO % 2 = 0;

#STEP.2
SELECT NAME, ROLLNO
FROM STUDENT
WHERE ROLLNO IN (102,104,106);

#SUBQUERIES IN THIS EVEN NUMBER CONDITION

SELECT NAME, ROLLNO
FROM STUDENT
WHERE ROLLNO IN (SELECT ROLLNO
                 FROM STUDENT
				WHERE ROLLNO % 2 = 0);
                
#EXAMPLE WITH FROM:

SELECT MAX(MARKS)
FROM (SELECT * FROM STUDENT WHERE CITY = "DELHI") AS TEMP; #SUBQUERY.

SELECT MAX(MARKS)
FROM (SELECT * FROM STUDENT WHERE CITY = "MUMBAI") AS TEMP; #SUBQUERY.

#EASY STEPS:

SELECT MAX(MARKS)
FROM STUDENT
WHERE CITY = "MUMBAI";

#EXAMPLE WITH SELECT:

SELECT (SELECT (MARKS) FROM STUDENT ), NAME
FROM STUDENT;


#MYSQLVIEWS:

CREATE VIEW VIEW1 AS 
SELECT ROLLNO, NAME, MARKS
FROM STUDENT;

SELECT * FROM VIEW1;  #THIS IS VIRTUAL TABLE TO SEE AND GIVE SOMEONE ACCESS TO SEE, TEMPORARY VIEW TO SOMEONE.

SELECT * FROM VIEW1
WHERE MARKS > 90;

DROP VIEW VIEW1; - #TO DELETE VIEW1 TEMP VIEW.
SELECT * FROM VIEW1